{"posts":[{"title":"部署 hexo 到 nginx","text":"本来博客是使用 GitHub pages ，但近些日子访问贼慢，刚好手里有一台小机器，当然是要用起来（折腾就对了🐶🐶🐶）。 前置条件已购买 vps 和域名，按需备案。 ssh 登录远程服务器，以 CentOS 为例： git 安装 1yum install git 测试 1git --version 输出类似下面的结果则表示安装成功 1git version 1.8.3.1 创建 git 用户 1adduser git 建立裸仓 1234cd /home/git # 进入 git 用户目录mkdir blog &amp;&amp; chown -R git:git $_# 创建博客文件夹，，设置权限,作为 nginx web 目录mkdir projects &amp;&amp; chown -R git:git $_ &amp;&amp; cd $_ # 创建项目目录，设置权限并进入git init --bare hexo.git &amp;&amp; chown -R git:git $_ # 创建博客裸仓，设置权限 添加 SSH Key，通过 ssh 链接仓库 12cd /home/git # 回到 git 用户目录mkdir .ssh # 存放 ssh key 在本地机器（写博客的电脑）上创建的 ssh 公钥（已有请忽略） 1ssh-keygen -o -t rsa -b 4096 -C &quot;email@example.com&quot; # 替换邮箱 复制公钥 1pbcopy &lt; ~/.ssh/id_rsa.pub 在远程服务器，使用 vim 编辑文件，vim 用法请参考： 1vi /home/git/.ssh/authorized_keys 按 i 进入编辑模式，粘贴公钥，按 esc，输入 :wq 保存并退出。 hexo 配置发布选项 修改 _config.yml （本级 hexo 配置文件） 1234deploy: type: git repo: git@ip:/home/git/projects/hexo.git # ip 为服务器ip branch: master 自动部署（服务器） 123cd /home/git/projects/hexo.git/hooks # 进入 hook 目录mv post-update.sample post-update # 重命名 post-updatevi post-update # vim 进行编辑 按 i 进入编辑模式，在最后一行上面粘贴下面文字，按 esc，输入 :wq 保存并退出。 1git --work-tree=/home/git/blog --git-dir=/home/git/projects/hexo.git checkout -f 在本地 hexo 目录执行发布命令 1hexo g -d 查看服务器 blog 目录中是否有文件，如果没有请检查步骤是否错误。 源代码存放 在我们服务器上存放的是变异后的文件，源文件我建议存放在 github 私有仓库。 nginx以 centos 为例： 安装 1yum install -y nginx 启动 1service nginx start 测试 1wget http://127.0.0.1 可以正常下载 index.html 文件则说明启动成功。 配置 1vi /etc/nginx/nginx.conf 把 user nginx; 修改为user root; server 按照修改两处配置： 1234root /home/git/blog;location / { index index.html; } 重启 nginx 1service nginx restart 在浏览器键入你的服务器 ip 地址或域名，即可正常访问。 https使用 certbot 自动获取证书，参考 https://certbot.eff.org/ 安装 Certbot 1sudo yum install certbot python2-certbot-nginx 获取证书并自动配置 1sudo certbot --nginx 按照提示输入即可 自动续签 1echo &quot;0 0,12 * * * root python -c 'import random; import time; time.sleep(random.random() * 3600)' &amp;&amp; certbot renew -q&quot; | sudo tee -a /etc/crontab &gt; /dev/null 结束至此，配置结束，开始写你的博客吧～","link":"/2020/04/19/hexobynginx.html"},{"title":"【LeetCode】01 两数之和","text":"题给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标。你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。 示例给定 nums = [2, 7, 11, 15], target = 9因为 nums[0] + nums[1] = 2 + 7 = 9所以返回 [0, 1] 答1234567891011121314151617/** * @param {number[]} nums * @param {number} target * @return {number[]} */var twoSum = function(nums, target) { let map = {}; for (let index = 0; index &lt; nums.length; index++) { let element = nums[index] let num = target - element if (map[num] !== undefined) { return [map[num], index] } map[element] = index } return []}; 思路此题难度：Easy。 最简单的方法是通过两次 for 循环暴力求解，复杂度 O(N^2)。第一次循环取出一个值，第二次从当前值的后面开始循环，依次取出与第一次的值相加，若和等于 target，则直接返回。 另一种方法是通过新建 map 以空间换时间，一次循环即可求出答案，复杂度 O(N)。在遍历数组时，将已经出现过的数字存放在 map 中，以数值为 key，索引为 value。每次循环查看余值是否在 map 中，如果存在，则返回当前的索引和 map 中的值。当然，如果循环结束，仍未查找到，返回空数组。","link":"/2019/04/14/lettcode-xi-lie-yi.html"},{"title":"【LeetCode】07 整数反转","text":"题目给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。 示例 1: 12输入: 123输出: 321 示例 2: 12输入: -123输出: -321 示例 3: 12输入: 120输出: 21 注意: 假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231, 231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。 思路此题难度：Easy。 翻转前的整数位 x，反转后的整数为 reverseX，那么 x 的最后一位一定是 reverseX 的第一位，通过循环取余，得到 x 的末位数字。假设 x 有 n 位，则循环n次，每次循环都使 x 左移一位，最后刚好 x 的末位变为 reverseX 的首位。依次类推，即可得到反转后的整数 reverseX。注意处理反转后整数溢出的情况。 解答1234567891011121314151617/** * @param {number} x * @return {number} */var reverse = function (x) { let reverseX = 0 while (true) { reverseX = reverseX * 10 + x % 10 x = parseInt(x / 10) if ((reverseX &gt; 2147483647) || reverseX &lt; -2147483648) { return 0 } else if (x === 0) { return reverseX } }}; 我的提交执行用时执行用时：124 ms内存消耗：36 MB 已经战胜 87.76 % 的 javascript 提交记录","link":"/2023/12/19/leetcode-07-zheng-shu-fan-zhuan.html"}],"tags":[{"name":"两数之和","slug":"两数之和","link":"/tags/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"},{"name":"整数反转","slug":"整数反转","link":"/tags/%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/"}],"categories":[{"name":"leetcode","slug":"leetcode","link":"/categories/leetcode/"}],"pages":[{"title":"","text":"","link":"/404.html"},{"title":"","text":"","link":"/about/index.html"},{"title":"","text":"","link":"/tags/index.html"},{"title":"","text":"","link":"/categories/index.html"}]}